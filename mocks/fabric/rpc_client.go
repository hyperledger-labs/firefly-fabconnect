// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockfabric

import (
	context "context"

	fabric "github.com/hyperledger-labs/firefly-fabconnect/internal/fabric"
	mock "github.com/stretchr/testify/mock"
)

// RPCClient is an autogenerated mock type for the RPCClient type
type RPCClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RPCClient) Close() {
	_m.Called()
}

// Init provides a mock function with given fields: ctx, channelId, chaincodeName, method, args
func (_m *RPCClient) Init(ctx context.Context, channelId string, chaincodeName string, method string, args []string) (fabric.TxReceipt, error) {
	ret := _m.Called(ctx, channelId, chaincodeName, method, args)

	var r0 fabric.TxReceipt
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) fabric.TxReceipt); ok {
		r0 = rf(ctx, channelId, chaincodeName, method, args)
	} else {
		r0 = ret.Get(0).(fabric.TxReceipt)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, channelId, chaincodeName, method, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoke provides a mock function with given fields: ctx, channelId, chaincodeName, method, args
func (_m *RPCClient) Invoke(ctx context.Context, channelId string, chaincodeName string, method string, args []string) (fabric.TxReceipt, error) {
	ret := _m.Called(ctx, channelId, chaincodeName, method, args)

	var r0 fabric.TxReceipt
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) fabric.TxReceipt); ok {
		r0 = rf(ctx, channelId, chaincodeName, method, args)
	} else {
		r0 = ret.Get(0).(fabric.TxReceipt)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, channelId, chaincodeName, method, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
